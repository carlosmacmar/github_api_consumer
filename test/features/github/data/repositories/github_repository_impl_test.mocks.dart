// Mocks generated by Mockito 5.0.17 from annotations
// in github_api_consumer/test/features/github/data/repositories/github_repository_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:github_api_consumer/core/network/network_info.dart' as _i2;
import 'package:github_api_consumer/core/util/enums.dart' as _i6;
import 'package:github_api_consumer/features/github/data/datasources/github_remote_data_source.dart'
    as _i4;
import 'package:github_api_consumer/features/github/data/models/issue_model.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i2.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> get isInternetAvailable =>
      (super.noSuchMethod(Invocation.getter(#isInternetAvailable),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
}

/// A class which mocks [GithubRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockGithubRemoteDataSource extends _i1.Mock
    implements _i4.GithubRemoteDataSource {
  MockGithubRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i5.IssueModel>> getIssues(int? page,
          _i6.FilterState? filterState, _i6.SortOption? sortOption) =>
      (super.noSuchMethod(
              Invocation.method(#getIssues, [page, filterState, sortOption]),
              returnValue:
                  Future<List<_i5.IssueModel>>.value(<_i5.IssueModel>[]))
          as _i3.Future<List<_i5.IssueModel>>);
}
